#!/usr/bin/env bash
# Tomb manager - Password Store Extension (https://www.passwordstore.org/)
# Copyright (C) 2008-2012 Git project
# Copyright (C) 2017-2019 Alexandre PUJOL <alexandre@pujol.io>.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# shellcheck disable=SC2094,SC2153,SC2016

_die() { echo "${@}" && exit 1; }
if $COVERAGE; then
	KCOV="$(command -v kcov)"
	[[ -e "$KCOV" ]] || _die "Could not find kcov command"
	mapfile -t COVERED < <(find "$TMP"/*.sh -maxdepth 0 -type d)
	[[ -z "$TRAVIS_JOB_ID" ]] || OPTS=("--coveralls-id=$TRAVIS_JOB_ID")
	IGNORES='esac done,done <,_warning "$ret",_die "Unable to initialise the password store."'
	"$KCOV" --exclude-line="$IGNORES" \
	        "${OPTS[@]}" --merge "$TMP/kcov" "${COVERED[@]}"
	covered="$(jq -r '.percent_covered' "$TMP/kcov/kcov-merged/coverage.json")"
	printf "%s: %s\n" coverage "$covered"
	cp -rf "$TMP/kcov/" "$PWD"
fi

failed_tests=
fixed=0
success=0
failed=0
broken=0
total=0
for file in tests/test-results/*.counts; do
	while read -r type value; do
		case $type in
		'')
			continue ;;
		fixed)
			fixed=$((fixed + value)) ;;
		success)
			success=$((success + value)) ;;
		failed)
			failed=$((failed + value))
			if test "$value" != 0; then
				test_name=$(expr "$file" : 'tests/test-results/\(.*\)\.[0-9]*\.counts')
				failed_tests="$failed_tests $test_name"
			fi
			;;
		broken)
			broken=$((broken + value)) ;;
		total)
			total=$((total + value)) ;;
		esac
	done <"$file"
done

if test -n "$failed_tests"; then
	printf "\nfailed test(s):%d\n\n" "$failed_tests"
fi

printf "%-8s%d\n" fixed "$fixed"
printf "%-8s%d\n" success "$success"
printf "%-8s%d\n" failed "$failed"
printf "%-8s%d\n" broken "$broken"
printf "%-8s%d\n" total "$total"

rm -rf tests/test-results
